// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`TableRow render the <TableRow> component 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <TableRow
    handleProgrammeEdit={[MockFunction]}
    handleProgrammeRemove={[MockFunction]}
    programme={Object {}}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "active": undefined,
      "children": Array [
        <td
          onClick={[Function]}
        />,
        <td
          onClick={[Function]}
        />,
        <td
          onClick={[Function]}
        />,
        <td
          onClick={[Function]}
        >
          Inactive
        </td>,
        <Styled(td)
          className="has-text-centered"
          onClick={[Function]}
        >
          <i
            className="fa fa-close"
          />
        </Styled(td)>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": undefined,
          "onClick": [Function],
        },
        "ref": null,
        "rendered": null,
        "type": "td",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": undefined,
          "onClick": [Function],
        },
        "ref": null,
        "rendered": null,
        "type": "td",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": undefined,
          "onClick": [Function],
        },
        "ref": null,
        "rendered": null,
        "type": "td",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Inactive",
          "onClick": [Function],
        },
        "ref": null,
        "rendered": "Inactive",
        "type": "td",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <i
            className="fa fa-close"
          />,
          "className": "has-text-centered",
          "onClick": [Function],
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "className": "fa fa-close",
          },
          "ref": null,
          "rendered": null,
          "type": "i",
        },
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "active": undefined,
        "children": Array [
          <td
            onClick={[Function]}
          />,
          <td
            onClick={[Function]}
          />,
          <td
            onClick={[Function]}
          />,
          <td
            onClick={[Function]}
          >
            Inactive
          </td>,
          <Styled(td)
            className="has-text-centered"
            onClick={[Function]}
          >
            <i
              className="fa fa-close"
            />
          </Styled(td)>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": undefined,
            "onClick": [Function],
          },
          "ref": null,
          "rendered": null,
          "type": "td",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": undefined,
            "onClick": [Function],
          },
          "ref": null,
          "rendered": null,
          "type": "td",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": undefined,
            "onClick": [Function],
          },
          "ref": null,
          "rendered": null,
          "type": "td",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Inactive",
            "onClick": [Function],
          },
          "ref": null,
          "rendered": "Inactive",
          "type": "td",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <i
              className="fa fa-close"
            />,
            "className": "has-text-centered",
            "onClick": [Function],
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "className": "fa fa-close",
            },
            "ref": null,
            "rendered": null,
            "type": "i",
          },
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
